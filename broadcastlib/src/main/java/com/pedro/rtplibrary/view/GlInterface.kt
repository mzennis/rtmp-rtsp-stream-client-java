package com.pedro.rtplibrary.view

import android.graphics.SurfaceTexture
import android.view.Surface
import com.pedro.encoder.input.gl.render.filters.BaseFilterRender

interface GlInterface {
    /**
     * Initialize necessary classes.
     */
    fun init()

    /**
     * Set video encoder size use to Opengl
     * @param width video encoder width in px
     * @param height video encoder height in px
     */
    fun setEncoderSize(width: Int, height: Int)

    /**
     * Get SurfaceTexture generated by Opengl. This should be called after start render.
     * @return surface texture generated by Opengl.
     */
    val surfaceTexture: SurfaceTexture?

    /**
     * Get Surface generated by Opengl. This should be called after start render.
     * @return surface texture generated by Opengl.
     */
    val surface: Surface?

    /**
     * Set surface from MediaCodec class to Opengl.
     * This surface is used to copy pixels from Opengl surface to this surface and encode this pixels.
     * @param surface surface created from MediaCodec.
     */
    fun addMediaCodecSurface(surface: Surface?)

    /**
     * Remove surface generated from MediaCodec.
     */
    fun removeMediaCodecSurface()

    /**
     * Capture an Image from Opengl.
     *
     * @param takePhotoCallback callback where you will get your image like a bitmap.
     */
    fun takePhoto(takePhotoCallback: TakePhotoCallback?)

    /**
     * Set a filter to stream.
     * You can select any filter from [com.pedro.encoder.input.gl.render.filters] or create
     * your own filter if you extends from [BaseFilterRender]
     *
     * @param baseFilterRender filter to set. You can modify parameters to filter after set it to stream.
     */
    fun setFilter(filterPosition: Int, baseFilterRender: BaseFilterRender?)

    /**
     * Set filter in position 0.
     * @param baseFilterRender filter to set. You can modify parameters to filter after set it to stream.
     */
    fun setFilter(baseFilterRender: BaseFilterRender?)

    /**
     * Enable or disable Anti aliasing (This method use FXAA).
     *
     * @param AAEnabled true is AA enabled, false is AA disabled. False by default.
     */
    fun enableAA(AAEnabled: Boolean)
    fun setRotation(rotation: Int)

    /**
     * @param rotation change stream rotation on fly. No effect to preview
     */
    fun setStreamRotation(rotation: Int)

    /**
     * When true, flips only the stream horizontally
     */
    fun setIsStreamHorizontalFlip(flip: Boolean)

    /**
     * When true, flips only the stream vertically
     */
    fun setIsStreamVerticalFlip(flip: Boolean)

    /**
     * Get Anti alias is enabled.
     * @return true is enabled, false is disabled.
     */
    val isAAEnabled: Boolean

    /**
     * INTERNAL METHOD.
     *
     * Start Opengl rendering.
     *
     */
    fun start()

    /**
     * INTERNAL METHOD.
     *
     * Stop Opengl rendering.
     */
    fun stop()

    fun setFps(fps: Int)

    /**
     * This produce send black image all time.
     * This affect to stream and record result.
     */
    fun muteVideo()

    fun unMuteVideo()

    val isVideoMuted: Boolean

    /**
     * @param force render last frame.
     * This is useful with Display mode to continue producing video frames.
     * Not recommendable in others modes.
     */
    fun setForceRender(force: Boolean)
}